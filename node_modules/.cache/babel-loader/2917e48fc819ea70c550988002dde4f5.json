{"ast":null,"code":"import _classCallCheck from\"/Users/juliatuvaleva/Desktop/dev/mesto-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/juliatuvaleva/Desktop/dev/mesto-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Api=/*#__PURE__*/function(){function Api(_ref){var address=_ref.address,cohortId=_ref.cohortId,token=_ref.token;_classCallCheck(this,Api);this._address=address;this._token=token;this._cohortId=cohortId;}_createClass(Api,[{key:\"_checkResponse\",value:function _checkResponse(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \".concat(res.status));}},{key:\"getProfileInfo\",value:function getProfileInfo(){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/users/me\"),{headers:{authorization:this._token}}).then(this._checkResponse);}},{key:\"getInitialCards\",value:function getInitialCards(){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/cards\"),{headers:{authorization:this._token}}).then(this._checkResponse);}},{key:\"editProfileInfo\",value:function editProfileInfo(userData){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/users/me\"),{method:\"PATCH\",headers:{authorization:this._token,'Content-Type':'application/json'},body:JSON.stringify({name:userData.name,about:userData.about})}).then(this._checkResponse);}},{key:\"addNewCard\",value:function addNewCard(cardData){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/cards\"),{method:\"POST\",headers:{authorization:this._token,'Content-Type':'application/json'},body:JSON.stringify({name:cardData.name,link:cardData.link})}).then(this._checkResponse);}},{key:\"deleteCard\",value:function deleteCard(cardId){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/cards/\").concat(cardId),{method:\"DELETE\",headers:{authorization:this._token}}).then(this._checkResponse);}},{key:\"addLikeCard\",value:function addLikeCard(cardId){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/cards/likes/\").concat(cardId),{method:\"PUT\",headers:{authorization:this._token}}).then(this._checkResponse);}},{key:\"cancelLikeCard\",value:function cancelLikeCard(cardId){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/cards/likes/\").concat(cardId),{method:\"DELETE\",headers:{authorization:this._token}}).then(this._checkResponse);}},{key:\"editProfilePhoto\",value:function editProfilePhoto(avatarLink){return fetch(\"\".concat(this._address,\"/\").concat(this._cohortId,\"/users/me/avatar\"),{method:\"PATCH\",headers:{authorization:this._token,'Content-Type':'application/json'},body:JSON.stringify({avatar:avatarLink.link})}).then(this._checkResponse);}}]);return Api;}();export var api=new Api({address:'https://mesto.nomoreparties.co/v1',cohortId:'cohort-22',token:'1ce66c26-e1b5-44dd-8df7-d34ef0ebc07d'});","map":{"version":3,"sources":["/Users/juliatuvaleva/Desktop/dev/mesto-react/src/utils/api.js"],"names":["Api","address","cohortId","token","_address","_token","_cohortId","res","ok","json","Promise","reject","status","fetch","headers","authorization","then","_checkResponse","userData","method","body","JSON","stringify","name","about","cardData","link","cardId","avatarLink","avatar","api"],"mappings":"uUAAMA,CAAAA,G,yBACF,kBAAwC,IAA3BC,CAAAA,OAA2B,MAA3BA,OAA2B,CAAlBC,QAAkB,MAAlBA,QAAkB,CAARC,KAAQ,MAARA,KAAQ,2BACpC,KAAKC,QAAL,CAAgBH,OAAhB,CACA,KAAKI,MAAL,CAAcF,KAAd,CACA,KAAKG,SAAL,CAAiBJ,QAAjB,CACH,C,8CAED,wBAAeK,GAAf,CAAoB,CAChB,GAAIA,GAAG,CAACC,EAAR,CAAY,CACR,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,gDAAyBJ,GAAG,CAACK,MAA7B,EAAP,CACH,C,8BAGD,yBAAiB,CACb,MAAOC,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,cAAgD,CACxDQ,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAD+C,CAAhD,CAAL,CAKNW,IALM,CAKD,KAAKC,cALJ,CAAP,CAMH,C,+BAED,0BAAiB,CACb,MAAOJ,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,WAA6C,CACrDQ,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAD4C,CAA7C,CAAL,CAKJW,IALI,CAKC,KAAKC,cALN,CAAP,CAMH,C,+BAED,yBAAgBC,QAAhB,CAAyB,CACrB,MAAOL,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,cAAgD,CACxDa,MAAM,CAAE,OADgD,CAExDL,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAEL,eAAgB,kBAFX,CAF+C,CAMxDe,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBC,IAAI,CAAEL,QAAQ,CAACK,IADE,CAEjBC,KAAK,CAAEN,QAAQ,CAACM,KAFC,CAAf,CANkD,CAAhD,CAAL,CAWJR,IAXI,CAWC,KAAKC,cAXN,CAAP,CAYH,C,0BAED,oBAAWQ,QAAX,CAAoB,CAChB,MAAOZ,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,WAA6C,CACrDa,MAAM,CAAE,MAD6C,CAErDL,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAEL,eAAgB,kBAFX,CAF4C,CAMrDe,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBC,IAAI,CAAEE,QAAQ,CAACF,IADE,CAEjBG,IAAI,CAAED,QAAQ,CAACC,IAFE,CAAf,CAN+C,CAA7C,CAAL,CAWJV,IAXI,CAWC,KAAKC,cAXN,CAAP,CAYH,C,0BAED,oBAAWU,MAAX,CAAmB,CACf,MAAOd,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,mBAA6CqB,MAA7C,EAAuD,CAC/DR,MAAM,CAAE,QADuD,CAE/DL,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAFsD,CAAvD,CAAL,CAMJW,IANI,CAMC,KAAKC,cANN,CAAP,CAOH,C,2BAED,qBAAYU,MAAZ,CAAoB,CAChB,MAAOd,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,yBAAmDqB,MAAnD,EAA6D,CACrER,MAAM,CAAE,KAD6D,CAErEL,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAF4D,CAA7D,CAAL,CAMJW,IANI,CAMC,KAAKC,cANN,CAAP,CAOH,C,8BAED,wBAAeU,MAAf,CAAsB,CAClB,MAAOd,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,yBAAmDqB,MAAnD,EAA6D,CACrER,MAAM,CAAE,QAD6D,CAErEL,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAF4D,CAA7D,CAAL,CAMJW,IANI,CAMC,KAAKC,cANN,CAAP,CAOH,C,gCAED,0BAAiBW,UAAjB,CAA4B,CACxB,MAAOf,CAAAA,KAAK,WAAI,KAAKT,QAAT,aAAqB,KAAKE,SAA1B,qBAAuD,CAC/Da,MAAM,CAAE,OADuD,CAE/DL,OAAO,CAAE,CACLC,aAAa,CAAE,KAAKV,MADf,CAEL,eAAgB,kBAFX,CAFsD,CAM/De,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBO,MAAM,CAAED,UAAU,CAACF,IADF,CAAf,CANyD,CAAvD,CAAL,CAUJV,IAVI,CAUC,KAAKC,cAVN,CAAP,CAWH,C,mBAKL,MAAO,IAAMa,CAAAA,GAAG,CAAG,GAAI9B,CAAAA,GAAJ,CAAQ,CACvBC,OAAO,CAAE,mCADc,CAEvBC,QAAQ,CAAE,WAFa,CAGvBC,KAAK,CAAE,sCAHgB,CAAR,CAAZ","sourcesContent":["class Api {\n    constructor({address, cohortId, token}) {\n        this._address = address;\n        this._token = token;\n        this._cohortId = cohortId;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n \n    \n    getProfileInfo() {\n        return fetch(`${this._address}/${this._cohortId}/users/me`, {\n            headers: {\n                authorization: this._token\n            }\n        })\n        .then(this._checkResponse)\n    }\n\n    getInitialCards(){\n        return fetch(`${this._address}/${this._cohortId}/cards`, {\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    editProfileInfo(userData){\n        return fetch(`${this._address}/${this._cohortId}/users/me`, {\n            method: \"PATCH\",\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: userData.name,\n                about: userData.about\n            })\n        })\n          .then(this._checkResponse)\n    }\n\n    addNewCard(cardData){\n        return fetch(`${this._address}/${this._cohortId}/cards`, {\n            method: \"POST\",\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: cardData.name,\n                link: cardData.link\n            })\n        })\n          .then(this._checkResponse)\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._address}/${this._cohortId}/cards/${cardId}`, {\n            method: \"DELETE\",\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    addLikeCard(cardId) {\n        return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n            method: \"PUT\",\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    cancelLikeCard(cardId){\n        return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n            method: \"DELETE\",\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    editProfilePhoto(avatarLink){\n        return fetch(`${this._address}/${this._cohortId}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: avatarLink.link,\n            })\n        })\n          .then(this._checkResponse)\n    }\n\n}\n\n\nexport const api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1',\n    cohortId: 'cohort-22',\n    token: '1ce66c26-e1b5-44dd-8df7-d34ef0ebc07d'\n});"]},"metadata":{},"sourceType":"module"}