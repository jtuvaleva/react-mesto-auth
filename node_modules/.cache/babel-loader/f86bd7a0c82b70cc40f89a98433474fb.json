{"ast":null,"code":"class Api {\n  constructor({\n    address,\n    cohortId,\n    token\n  }) {\n    this._address = address;\n    this._token = token;\n    this._cohortId = cohortId;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getProfileInfo() {\n    return fetch(`${this._address}/${this._cohortId}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._address}/${this._cohortId}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  editProfileInfo(userData) {\n    return fetch(`${this._address}/${this._cohortId}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  addNewCard(cardData) {\n    return fetch(`${this._address}/${this._cohortId}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._address}/${this._cohortId}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  addLikeCard(cardId) {\n    return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  cancelLikeCard(cardId) {\n    return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (!isLiked) {\n      return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n        method: \"PUT\",\n        headers: {\n          authorization: this._token\n        }\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n        method: \"DELETE\",\n        headers: {\n          authorization: this._token\n        }\n      }).then(this._checkResponse);\n    }\n  }\n\n  editProfilePhoto(avatarLink) {\n    return fetch(`${this._address}/${this._cohortId}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarLink.link\n      })\n    }).then(this._checkResponse);\n  }\n\n}\n\nexport const api = new Api({\n  address: 'https://mesto.nomoreparties.co/v1',\n  cohortId: 'cohort-22',\n  token: '1ce66c26-e1b5-44dd-8df7-d34ef0ebc07d'\n});","map":{"version":3,"sources":["/Users/juliatuvaleva/Desktop/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","address","cohortId","token","_address","_token","_cohortId","_checkResponse","res","ok","json","Promise","reject","status","getProfileInfo","fetch","headers","authorization","then","getInitialCards","editProfileInfo","userData","method","body","JSON","stringify","name","about","addNewCard","cardData","link","deleteCard","cardId","addLikeCard","cancelLikeCard","changeLikeCardStatus","isLiked","editProfilePhoto","avatarLink","avatar","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor({address, cohortId, token}) {\n        this._address = address;\n        this._token = token;\n        this._cohortId = cohortId;\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n \n    \n    getProfileInfo() {\n        return fetch(`${this._address}/${this._cohortId}/users/me`, {\n            headers: {\n                authorization: this._token\n            }\n        })\n        .then(this._checkResponse)\n    }\n\n    getInitialCards(){\n        return fetch(`${this._address}/${this._cohortId}/cards`, {\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    editProfileInfo(userData){\n        return fetch(`${this._address}/${this._cohortId}/users/me`, {\n            method: \"PATCH\",\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: userData.name,\n                about: userData.about\n            })\n        })\n          .then(this._checkResponse)\n    }\n\n    addNewCard(cardData){\n        return fetch(`${this._address}/${this._cohortId}/cards`, {\n            method: \"POST\",\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: cardData.name,\n                link: cardData.link\n            })\n        })\n          .then(this._checkResponse)\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._address}/${this._cohortId}/cards/${cardId}`, {\n            method: \"DELETE\",\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    addLikeCard(cardId) {\n        return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n            method: \"PUT\",\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    cancelLikeCard(cardId){\n        return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n            method: \"DELETE\",\n            headers: {\n                authorization: this._token\n            }\n        })\n          .then(this._checkResponse)\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (!isLiked) {\n            return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n                method: \"PUT\",\n                headers: {\n                    authorization: this._token\n                }\n            })\n              .then(this._checkResponse)\n        } else {\n            return fetch(`${this._address}/${this._cohortId}/cards/likes/${cardId}`, {\n                method: \"DELETE\",\n                headers: {\n                    authorization: this._token\n                }\n            })\n              .then(this._checkResponse)\n        }\n    }\n\n\n    editProfilePhoto(avatarLink){\n        return fetch(`${this._address}/${this._cohortId}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: avatarLink.link,\n            })\n        })\n          .then(this._checkResponse)\n    }\n\n}\n\n\nexport const api = new Api({\n    address: 'https://mesto.nomoreparties.co/v1',\n    cohortId: 'cohort-22',\n    token: '1ce66c26-e1b5-44dd-8df7-d34ef0ebc07d'\n});"]},"metadata":{},"sourceType":"module"}